@model DataPage
@{
	int selectedPageNum;
	IList<int> pageNums = Model.GetNearestPageNumbers(8, true, out selectedPageNum);

	Func<int, string> getOnClick = (i => 
		"pagingLoad('"+Url.Action(Model.GetActionForPageIndex(i))+"'); return false;"
	);
}

<div class="pagination-centered">
	<ul class="pagination">
		@if ( Model.HasPrevPage() ) {
			<li class="arrow">
				<a href="#" onclick="@getOnClick(Model.GetIndexForPrevPage())">&laquo;</a>
			</li>
		}
		else {
			<li class="arrow unavailable">
				<a>&laquo;</a>
			</li>
		}
		
		@for ( int i = 0 ; i < pageNums.Count ; ++i ) {
			int pn = pageNums[i];

			if ( pn == -1 ) {
				<li class="unavailable">
					<a>&hellip;</a>
				</li>
				continue;
			}
			
			if ( i == selectedPageNum ) {
				<li class="current">
					<a>@(pn+1)</a>
				</li>
				continue;
			}
	  
			<li>
				<a href="#" onclick="@getOnClick(Model.GetIndexForPageNumber(pn))">@(pn+1)</a>
			</li>
		}
		
		@if ( Model.HasNextPage() ) {
			<li class="arrow">
				<a href="#" onclick="@getOnClick(Model.GetIndexForNextPage())">&raquo;</a>
			</li>
		}
		else {
			<li class="arrow unavailable">
				<a>&raquo;</a>
			</li>
		}

	</ul>
</div>